<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="47" time="0.057" timestamp="2023-11-29T19:48:49.511556" hostname="f62243881d2b"><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[10-3-3]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[7--3--2]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[-2147483648--1-2147483647]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[0-1-0]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[1-1-1]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[2147483647-1-2147483647]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[15-5-3]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[50-7-7]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[-100--25-4]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[0--5-0]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[1024-16-64]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[-12345-789--15]" time="0.000" /><testcase classname="leetcode.divide-two-integers.test_divide_two_integers" name="test_divide[123456-789-156]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[3-III]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[58-LVIII]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[1-I]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[9-IX]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[444-CDXLIV]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[1994-MCMXCIV]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[90-XC]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[40-XL]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[140-CXL]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[3999-MMMCMXCIX]" time="0.000" /><testcase classname="leetcode.integer-to-roman.test_integer_to_roman" name="test_int_to_roman[0-]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[121-True]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[-121-False]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[10-False]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[0-True]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[12321-True]" time="0.000" /><testcase classname="leetcode.palindrome-number.test_palindrome_number" name="test_is_palindrome[123456-False]" time="0.000" /><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums0-0-expected_nums0]" time="0.000"><failure message="assert 1 == 0">nums = [], expected_result = 0, expected_nums = []

    @pytest.mark.parametrize(
        ('nums', 'expected_result', 'expected_nums'),
        [
            ([], 0, []),
            ([1, 1, 2], 2, [1, 2]),
            ([0, 0, 1, 1, 1, 2, 2, 3, 3, 4], 5, [0, 1, 2, 3, 4]),
            ([1, 2, 3], 3, [1, 2, 3]),
            ([1, 1, 1, 1], 1, [1]),
            ([1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5], 5, [1, 2, 3, 4, 5]),
        ],
    )
    def test_removeDuplicates(
        nums: List[int],
        expected_result: int,
        expected_nums: List[int],
    ):
        solution = Solution()
        result = solution.removeDuplicates(nums)
&gt;       assert result == expected_result
E       assert 1 == 0

leetcode/remove-duplicates-from-sorted-array/test_remove_duplicates_from_sorted_array.py:25: AssertionError</failure></testcase><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums1-2-expected_nums1]" time="0.000" /><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums2-5-expected_nums2]" time="0.000" /><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums3-3-expected_nums3]" time="0.000" /><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums4-1-expected_nums4]" time="0.000" /><testcase classname="leetcode.remove-duplicates-from-sorted-array.test_remove_duplicates_from_sorted_array" name="test_removeDuplicates[nums5-5-expected_nums5]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[III-3]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[LVIII-58]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[I-1]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[IX-9]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[CDXLIV-444]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[MCMXCIV-1994]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[XC-90]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[XL-40]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[CXL-140]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[MMMCMXCIX-3999]" time="0.000" /><testcase classname="leetcode.roman-to-integer.test_roman_to_integer" name="test_roman_to_int[-0]" time="0.000" /></testsuite></testsuites>